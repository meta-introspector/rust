feat: Implement monadic refactoring and direct Cargo integration in rust-bootstrap

This commit introduces a significant architectural overhaul to the `rust-bootstrap` crate, moving towards a highly modular, formally verifiable, and self-contained system. Key changes include:

- **Monadic Refactoring & Extreme Modularity:**
    - Implemented `build.rs` for automated generation of `clap` argument and subcommand providers, enforcing modularity in CLI parsing.
    - Refactored `command_executor` to break down command execution into smaller, composable units, aligning with the "one declaration per file" principle.
    - Introduced `exec_panic` mechanism to disallow direct shell command execution, enforcing the use of integrated library calls.
    - Utilized `tracing` for enhanced logging and observability.
    - (Related CRQs: CRQ-005-MonadicRefactoringAndCargoIntegration.md, CRQ-006-EnforceMonadicExecution.md)

- **Direct Cargo Integration:**
    - Integrated `cargo` library functions directly into `rust-bootstrap` for operations like `build` and `check`, replacing external `cargo` process calls.
    - Developed a modular `cargo_integration` module with sub-modules for `GlobalContext` initialization, `Workspace` management, and argument parsing.
    - (Related CRQ: CRQ-005-MonadicRefactoringAndCargoIntegration.md)

- **Git Analyzer CLI Separation:**
    - Separated the Git repository analysis functionality into a new, dedicated binary `git-analyzer-cli`, enhancing modularity and reusability.

- **Initial Setup Test:**
    - Added a property-based test for `rust-bootstrap`'s argument parsing, ensuring robustness of the initial CLI setup.
    - (Related CRQ: CRQ-001-InitialSetup.md)

- **Miri Vendorization Plan:**
    - Documented the plan to vendor `miri` for in-memory MIR execution, a future step towards the "monolithic mini Rust" initiative.
    - (Related CRQ: CRQ-004-VendorizeMiri.md)

This commit lays the groundwork for a more robust, auditable, and formally verifiable Rust bootstrap process.